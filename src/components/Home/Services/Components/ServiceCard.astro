---
import { Image } from "astro:assets";

import Arrow from "@assets/Icons/ArrowTR.svg";

import ServiceCardDescription from "./ServiceCardDescription.astro";
import { type ServicesCardData } from "./ServicesCardData.ts";

const { title, description, image } = Astro.props as ServicesCardData;
---

<!-- Card Default -->
<div
  data-aos="zoom-in-up"
  class="group grid aspect-square grid-cols-4 grid-rows-4 gap-2"
  onmousedown="_toggleDescriptionVisibility(this)"
>
  <div
    class="service-image-container relative col-span-full row-span-full before:absolute before:inset-0 before:bg-black before:opacity-10 before:transition-opacity group-hover:before:opacity-30"
  >
    <Image
      src={image}
      alt={title}
      class="size-full object-cover"
      loading="lazy"
    />
  </div>
  <div
    class="z-10 col-span-3 col-start-1 -row-start-2 self-center justify-self-center"
  >
    <h3
      class="size-full cursor-default rounded-full bg-white/15 px-4 py-2 text-center text-sm font-medium text-slate-100 capitalize backdrop-blur-xs transition-transform ease-out will-change-transform group-hover:-translate-y-2 md:text-base lg:text-lg"
    >
      {title}
    </h3>
  </div>

  <div class="-col-start-2 -row-start-2 rounded-full bg-green-500">
    <Arrow
      class="size-full scale-90 object-cover text-teal-50 transition-transform duration-100 will-change-transform group-hover:scale-100 group-hover:rotate-45"
    />
  </div>
</div>
<!-- !Do not change Position -->
<ServiceCardDescription description={description} />

<script is:inline>
  function _toggleDescriptionVisibility(triggerElement) {
    const descriptionContainer = triggerElement.nextElementSibling;
    const isOpen =
      descriptionContainer
        .getAttribute("data-is-open")
        ?.toLowerCase()
        .trim() === "true";
    if (!isOpen) {
      descriptionContainer.setAttribute("data-is-open", true);
    } else {
      descriptionContainer.setAttribute("data-is-open", false);
    }
  }
</script>

<script>
  import getClipPath, { type ScreenSpaceCoordinate } from "@utils/getClipPath";

  const clipPathCornerNodes: ScreenSpaceCoordinate[] = [
    [0, 0], //Top Left
    [1, 0],
    [1, 0.73],
    [0.725, 0.725],
    [0.73, 1],
    [0, 1],
  ];

  function drawClipPathForAll() {
    const containers = document.querySelectorAll<HTMLElement>(
      ".service-image-container",
    );

    containers.forEach((container) => {
      const width = container.offsetWidth;
      const height = container.offsetHeight;
      const path = getClipPath({
        containerWidth: width,
        containerHeight: height,
        coordinates: clipPathCornerNodes,
        arcRadius: 30,
      });
      container.style.clipPath = `path('${path}')`;
    });
  }

  drawClipPathForAll();

  let timeout: any;
  window.addEventListener("resize", () => {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      drawClipPathForAll();
    }, 100);
  });
</script>
