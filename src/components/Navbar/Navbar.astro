---
import Logo from "@assets/logo_small.svg";

import { navLinks } from "./navlinks.ts";
---

<div
  id="navbar-container"
  class="group !pointer-events-none fixed inset-x-0 top-0 z-999 grid place-content-stretch px-2 pt-2 pb-2 sm:place-content-center sm:px-4"
  data-is-hovered="false"
  data-aos="slide-down"
  data-aos-duration="750"
  data-aos-easing="ease-out"
  onmouseenter='this.dataset.isHovered = "true"'
  onmouseleave='this.dataset.isHovered = "false"'
>
  <header
    id="navbar"
    data-visibility="hidden"
    class="pointer-events-auto relative w-full rounded-full border border-green-600 bg-gradient-to-br from-green-500 to-teal-500 py-2 pr-3 pl-2 shadow-md shadow-green-800 transition-all duration-500 ease-out group-hover:[transform:translateY(0%)] hover:brightness-110 sm:w-fit sm:pr-8 sm:pl-4 md:shadow-2xl"
    style="--translateY:-250%;"
  >
    <nav
      class="flex size-full items-center justify-between gap-3 text-white sm:gap-8 md:gap-16"
    >
      <a href="#home" class="" aria-label="Home">
        <Logo class="size-6 sm:size-8 md:size-12" />
      </a>
      <div class="flex items-center justify-center gap-2 sm:gap-4">
        {
          navLinks.map((navLink) => (
            <a
              class="relative rounded-full bg-white/5 text-[0.97rem] transition-transform duration-500 before:absolute before:inset-x-0 before:bottom-0 before:mt-1 before:h-px before:origin-left before:scale-x-0 before:bg-slate-200 before:transition-transform before:duration-500 before:ease-in hover:-translate-y-1 hover:before:scale-x-100 hover:before:ease-out sm:text-xl"
              href={navLink.href}
            >
              {navLink.name}
            </a>
          ))
        }
      </div>
    </nav>
  </header>
</div>

<script>
  const navbarContainer = document.getElementById("navbar-container")!;
  const navbar = document.getElementById("navbar")!;

  let lastScrollY = window.scrollY;

  window.addEventListener("scroll", () => {
    const currentScrollY = window.scrollY;
    const isHovered =
      navbarContainer.dataset.isHovered?.toLowerCase().trim() === "true";
    const isNavbarHidden =
      navbar.dataset.visibility?.trim().toLowerCase() === "hidden";

    // Don't animate if hovered or already animating
    if (isHovered) {
      lastScrollY = currentScrollY;
      return;
    }

    // Only trigger animation if scroll distance is significant (prevents jitter)
    if (Math.abs(currentScrollY - lastScrollY) < 100) {
      return;
    }

    if (currentScrollY < lastScrollY) {
      // Scrolling up - show navbar
      if (isNavbarHidden) {
        showNavbar();
      }
    } else {
      // Scrolling down - hide navbar
      if (!isNavbarHidden) {
        hideNavbar();
      }
    }

    lastScrollY = currentScrollY;
  });

  function showNavbar() {
    navbar.dataset.visibility = "visible";
    navbar.style.transform = "translateY(0)";
    setTimeout(() => {
      hideNavbar();
    }, 1000);
  }
  function hideNavbar() {
    navbar.dataset.visibility = "hidden";
    navbar.style.removeProperty("transform");
  }
</script>
